const elementosCelula = document.querySelectorAll("[data-celula]");
//o elementosCelula retorna uma nodeList, algo semelhante a um array, uma lista indexaos.

console.log(elementosCelula);

const tabuleiro = document.querySelector('.tabuleiro');
let msgVitoria = document.getElementById('mensagemVitoria');
let cxVitoria = document.querySelector('.mensagem');

let vezCirculo;

let  combinacaoVitoria = [
    [0,1,2],
    [0,3,6],
    [1,4,7],
    [2,5,8],
    [3,4,5],
    [6,7,8],
    [0,4,8],
    [2,4,6],
]

const comecaJogo = () => {
    for( const celula of elementosCelula){
        celula.addEventListener("click", cliqueJogo, {once:true});
    }

    let vezCirculo = false;

    tabuleiro.classList.add("x")
}


const encerrarJogo = (empate)=>{
    if(empate){
        msgVitoria.innerText = "DEU VELHA!";
    }else{
        msgVitoria.innerHTML = vezCirculo? "<p> <strong>O</strong> VENCEU</p>": "<p> <strong>X</strong> VENCEU</p>";
    }


    cxVitoria.classList.add("mostrarMsg");
}

const trocarJogador = () =>{
    vezCirculo = !vezCirculo;
    tabuleiro.classList.remove("o","x");
    
    if(vezCirculo){
        tabuleiro.classList.add("o");
    }else{
        tabuleiro.classList.add("x");
    }

}



//jogador atual s√£o os valores classeAd ('x' ou 'o').
// No contexto do c√≥digo, combination √© um √∫nico array dentro da lista combinacaoVitoria que representa uma combina√ß√£o espec√≠fica de √≠ndices das c√©lulas que formam uma linha, coluna ou diagonal no tabuleiro.
// Exemplo de combination:
// [0, 1, 2]
//index √© a posi√ß√£o no array combina√ß√£oVitoria.Se naquela posi√ß√£o do index h√° uma classe.
// ent√£o some √© pra que todas as combina√ß√µes sejam checadas, every percorre uma combina√ß√£o procurando se todas tem x ou o, e ele passa index das combina√ß√µes como parametro, e acessa no elementosCelulas os indexes correspondentes e analisa se tem a classe do jogador atual? respostas curtas

// Exatamente! üòÑ
// some: Checa se pelo menos uma combina√ß√£o de vit√≥ria tem todas as c√©lulas com a classe do jogador atual.
// every: Percorre uma combina√ß√£o espec√≠fica e verifica se todas as c√©lulas dessa combina√ß√£o t√™m a classe do jogador atual (se for X ou O).
// O index dentro de every √© o √≠ndice da combina√ß√£o de vit√≥ria, e elementosCelula[index] acessa as c√©lulas correspondentes no tabuleiro para verificar se t√™m a classe do jogador atual.
const verificarVitoria = (jogadorAtual) => {
    return combinacaoVitoria.some((combinacao) =>{
        return combinacao.every ((index) =>{
            return elementosCelula[index].classList.contains(jogadorAtual);
        });
    });
}

// const addClasse =(celula, classeAd)=>{
//     celula.classList.add(classeAd);
// }

const cliqueJogo = (e) =>{

    //adiciona x ou o
    const celula = e.target;
    const classeAd = vezCirculo? 'o' :  'x';

    celula.classList.add(classeAd);

    //verificar vitoria
    const vitoria = verificarVitoria(classeAd);
    if(vitoria){
        encerrarJogo(false);
    }


    const empate = [...elementosCelula].every((celula) => celula.classList.contains("x")||celula.classList.contains("o"));
    if(empate){
        encerrarJogo(true);
    }
    //troca o jogador
    trocarJogador();
    // O trocarJogador() ser√° executado somente se n√£o houver um vencedor.
}

const reiniciar = () =>{
    for(const celula of elementosCelula){
    celula.classList.remove("x","o");
    }
    cxVitoria.classList.remove("mostrarMsg");


    comecaJogo();
    // O { once: true } garante que o evento de clique seja disparado apenas uma vez, mas quando o jogo reinicia, voc√™ precisa reativar esse comportamento, ou seja, adicionar novamente os event listeners para que as c√©lulas possam ser clicadas novamente.
    // Ao chamar a fun√ß√£o comecaJogo() novamente dentro do reiniciar(), voc√™ est√° reativando os event listeners nas c√©lulas, permitindo que os jogadores possam clicar nelas novamente e fazer suas jogadas.
}

comecaJogo();

// for( const celula of elementosCelula){
//     celula.addEventListener("click", cliqueJogo, {once:true});
// }

//pesquisar once:true;

// o celula representa um elemento da lista, por exemplo o elemento clicado?
// Exatamente! Dentro do for, a vari√°vel celula representa cada elemento da lista de c√©lulas (elementosCelula). Ou seja, durante a itera√ß√£o, celula √© um elemento individual do tabuleiro, como uma c√©lula, mas n√£o necessariamente a c√©lula clicada ‚Äî a c√©lula clicada √© tratada dentro da fun√ß√£o cliqueJogo.


// A fun√ß√£o comecaJogo() √© chamada automaticamente ap√≥s o carregamento completo do DOM. Quando o navegador termina de renderizar a p√°gina, o JavaScript √© executado e, no final do c√≥digo, a fun√ß√£o √© invocada para inicializar o jogo, configurando os eventos de clique nas c√©lulas.



// for: O for √© usado para percorrer a lista de c√©lulas (elementosCelula), que s√£o selecionadas no DOM.
// addEventListener: Dentro do loop, para cada c√©lula, √© adicionado um ouvinte de evento de clique (click). Quando a c√©lula √© clicada, a fun√ß√£o cliqueJogo √© chamada.
// {once: true}: Essa op√ß√£o garante que o evento de clique na c√©lula seja registrado apenas uma vez. Ou seja, a c√©lula s√≥ pode ser clicada uma vez, e depois o ouvinte de evento √© removido automaticamente. Isso evita que a c√©lula seja clicada novamente durante o jogo.
// celula √© o nome da vari√°vel dentro do loop e pode ser alterado para qualquer outro nome. Ele s√≥ representa cada c√©lula do tabuleiro no momento em que o loop percorre a lista de elementos.
// cliqueJogo (sem os par√™nteses) √© passado como refer√™ncia para o addEventListener, permitindo que a fun√ß√£o seja executada quando o evento ocorrer. Se fosse cliqueJogo(), a fun√ß√£o seria chamada imediatamente ao adicionar o ouvinte, o que n√£o √© o desejado.
// A vari√°vel vezCirculo controla a altern√¢ncia entre os jogadores "X" e "O". Quando false, o jogador "X" joga, e quando true, o jogador "O" joga. Ela tamb√©m altera o estilo do tabuleiro e garante que o jogo troque corretamente entre os jogadores, impactando a l√≥gica do jogo.
// tabuleiro.classList.add("x")
// A linha tabuleiro.classList.add("x") adiciona a classe x ao elemento do tabuleiro, indicando que o primeiro jogador ser√° o "X". Isso altera o estilo do tabuleiro, aplicando qualquer estilo CSS associado √† classe x e sinalizando que √© a vez do jogador "X".
// Sim, **`e`** (ou **`event`**) √© o par√¢metro que representa o evento, passado automaticamente pela fun√ß√£o de callback. **`e.target`** (ou **`event.target`**) √© a c√©lula que foi clicada. Ent√£o, **`const celula = e.target;`** pega a c√©lula que disparou o evento.
// tem necessidade deste const celula = e.target? ja que o evento j√° esta sendo passado para essa fun√ß√£o?
// Embora o evento seja passado automaticamente para a fun√ß√£o cliqueJogo, a linha const celula = e.target; ainda √© necess√°ria para referenciar o elemento espec√≠fico que foi clicado.
// O e.target √© o elemento que disparou o evento, e a vari√°vel celula serve para simplificar o c√≥digo, armazenando esse elemento em uma vari√°vel mais leg√≠vel e f√°cil de usar ao longo da fun√ß√£o.
// Sem essa linha, voc√™ precisaria acessar e.target diretamente em todos os lugares onde fosse necess√°rio, como por exemplo:
// addClasse(e.target, classeAd);
// Ent√£o, n√£o √© obrigat√≥rio ter essa linha, mas ela ajuda a deixar o c√≥digo mais claro e f√°cil de entender.
// √© necess√°rio para referenciar a celula especifica que foi acionada?
// Sim, a linha const celula = e.target; √© necess√°ria para referenciar a c√©lula espec√≠fica que foi clicada.
// Embora o e.target j√° forne√ßa a c√©lula clicada, essa linha armazena o valor em uma vari√°vel chamada celula, o que facilita o uso da c√©lula dentro da fun√ß√£o. Sem ela, voc√™ precisaria acessar e.target diretamente em cada lugar onde precisasse usar a c√©lula clicada.
// A fun√ß√£o addClasse adiciona a classe classeAd √† celula.
// celula √© o elemento (a c√©lula do tabuleiro) onde a classe ser√° adicionada.
// classeAd √© a classe que ser√° adicionada, que pode ser 'x' ou 'o', dependendo do jogador.
// Em resumo, ela aplica a classe fornecida √† c√©lula especificada.
// o classeAd √© o valor x ou o?
// Sim, classeAd √© o valor 'x' ou 'o'.
// Se for a vez do jogador X, classeAd ser√° 'x'.
// Se for a vez do jogador O, classeAd ser√° 'o'.
// Esse valor √© passado para a fun√ß√£o addClasse e √© adicionado como uma classe √† c√©lula.
// Sim, a fun√ß√£o verificarVitoria verifica as possibilidades de vit√≥ria e recebe x ou o como par√¢metro para verificar se o jogador venceu.
// ele verifica onde tem x e o's  verifica se algum se alinha com as possibilidades de vit√≥ria?
// Exato! A fun√ß√£o verificarVitoria verifica onde h√° x ou o nas c√©lulas do tabuleiro e checa se algum desses s√≠mbolos se alinha com as combina√ß√µes de vit√≥ria definidas (como 3 em linha horizontal, vertical ou diagonal).
// ent√£o a cada jogada essa fun√ß√£o verifica se existe um vencedor? vendo se as celulas com o e x se alinha com as possibilidades de vitoria? ele n√£o adiciona x ou o, apenas verifica se nas celulas onde os x e os baseados na sua posi√ß√£o veirifica se h√° vitoria?
// Exatamente! A fun√ß√£o verificarVitoria n√£o adiciona x ou o. Ela simplesmente verifica se, nas c√©lulas do tabuleiro, os s√≠mbolos x ou o est√£o alinhados conforme as combina√ß√µes de vit√≥ria predefinidas.
// A cada jogada, ela:
// Verifica as c√©lulas para ver onde est√£o os x e o.
// Checa se esses s√≠mbolos est√£o alinhados em uma das poss√≠veis combina√ß√µes de vit√≥ria (como linhas, colunas ou diagonais).
// Ou seja, ela s√≥ faz a verifica√ß√£o, sem alterar nada no tabuleiro. Se encontrar uma combina√ß√£o vencedora, ela retorna true.
// verificaVitoria recebe os valores de classeAd? poderia ser esse nome? respostas curtas
// Sim, verificarVitoria recebe o valor de classeAd (que pode ser 'x' ou 'o') como par√¢metro para verificar se esse jogador venceu. O nome classeAd funciona bem, mas pode ser nomeado de qualquer forma que fa√ßa sentido, como jogadorAtual, por exemplo.
// e isso vai retorna um valor true ou false?
// Sim, a fun√ß√£o verificarVitoria retorna true se o jogador atual (representado por classeAd, que pode ser 'x' ou 'o') tiver uma combina√ß√£o vencedora no tabuleiro. Caso contr√°rio, retorna false.
// como ele usa o jogadorAtual como parametro para testar as combina√ß√µes de vit√≥ria?
// O par√¢metro jogadorAtual (que √© o valor de classeAd, sendo 'x' ou 'o') √© usado para verificar se as c√©lulas nas combina√ß√µes de vit√≥ria possuem a classe correspondente ao jogador atual.
// Aqui est√° como funciona:
// A fun√ß√£o verificarVitoria(jogadorAtual) recebe jogadorAtual como argumento (pode ser 'x' ou 'o').
// Dentro da fun√ß√£o, a combina√ß√£oVitoria (um array de arrays com combina√ß√µes de √≠ndices) √© percorrida. Cada combina√ß√£o representa uma linha, coluna ou diagonal no tabuleiro.
// Para cada combination (que √© um array de √≠ndices, como [0, 1, 2] para uma linha), o m√©todo every() verifica se todas as c√©lulas dessa combina√ß√£o cont√™m a classe do jogadorAtual.
// combination.every((index) => {
//     return elementosCelula[index].classList.contains(jogadorAtual);
// });
// elementosCelula[index].classList.contains(jogadorAtual) verifica se a c√©lula no √≠ndice index cont√©m a classe correspondente ao jogador (se √© 'x' ou 'o').
// Se todas as c√©lulas da combina√ß√£o contiverem o jogadorAtual, a fun√ß√£o some() retorna true, indicando vit√≥ria. Caso contr√°rio, continua verificando outras combina√ß√µes.
// jogadorAtual (ou classeAd) √© usado para testar se todas as c√©lulas de uma combina√ß√£o cont√™m o s√≠mbolo do jogador atual.
// Se uma combina√ß√£o for vencedora, retorna true, caso contr√°rio, false.
// some() verifica se pelo menos uma combina√ß√£o de c√©lulas tem a classe do jogador.
// every() verifica se todas as c√©lulas de uma combina√ß√£o t√™m a classe do jogador.
// some() verifica se pelo menos uma combina√ß√£o √© verdadeira (ou seja, se uma combina√ß√£o tem x ou o em todas as suas c√©lulas).
// every() verifica se todas as c√©lulas dentro de uma combina√ß√£o t√™m a classe do jogador atual (se √© x ou o).

// o every √© mais um metodo para que todas as combina√ß√µes sejam percorridas e every verifica se alguma tem os valores? e quando every retorna true some tbm retorna?
// Sim, exatamente!
// every() percorre uma combina√ß√£o e verifica se todas as c√©lulas dessa combina√ß√£o t√™m o valor do jogador (ex: "x" ou "o").
// Quando every() retorna true, significa que todas as c√©lulas daquela combina√ß√£o t√™m o valor esperado, e ent√£o o some() retorna true tamb√©m, pois encontrou uma combina√ß√£o vencedora.
// O some() retorna true assim que encontra qualquer combina√ß√£o v√°lida, e n√£o verifica mais as outras.
// O **`index`** √© a posi√ß√£o do **array de combina√ß√µes de vit√≥ria**. 

// Cada combina√ß√£o de vit√≥ria, como `[0, 1, 2]`, tem √≠ndices que representam as posi√ß√µes das c√©lulas no **array** de c√©lulas do tabuleiro. O **`index`** percorre essas posi√ß√µes para verificar se a c√©lula correspondente possui a classe do **`jogadorAtual`**.

// Por exemplo, se a combina√ß√£o de vit√≥ria for `[0, 1, 2]`, o **`index`** ir√° iterar sobre 0, 1 e 2, e verificar se as c√©lulas nas posi√ß√µes 0, 1 e 2 t√™m o valor "x" ou "o" (dependendo do jogador).


// every ir√° verificar se nas posi√ß√µes do array de combin√ßa√µ de vitoria h√° x ou o?

// Sim, exatamente! O every() verifica se, nas posi√ß√µes do array de combina√ß√µes de vit√≥ria, todas as c√©lulas possuem o valor correto (ou seja, "x" ou "o").

// Por exemplo, para a combina√ß√£o [0, 1, 2], every() vai verificar se as c√©lulas nas posi√ß√µes 0, 1 e 2 t√™m a classe do jogadorAtual (se √© "x" ou "o"). Se todas as c√©lulas tiverem o valor esperado, every() retorna true.


// elementos celula ira acessar o conteudo da celula baseado no index?

// Sim, exatamente! A elementosCelula √© uma lista (ou NodeList) contendo todas as c√©lulas do tabuleiro, e o index √© usado para acessar o conte√∫do de uma c√©lula espec√≠fica.

// Por exemplo, no c√≥digo:


// elementosCelula[index].classList.contains(jogadorAtual);
// index √© a posi√ß√£o da c√©lula na combina√ß√£o de vit√≥ria.
// elementosCelula[index] acessa a c√©lula correspondente a esse √≠ndice.
// .classList.contains(jogadorAtual) verifica se a c√©lula cont√©m a classe do jogador atual (se √© "x" ou "o").
// Portanto, o index serve para acessar e verificar o conte√∫do de cada c√©lula no tabuleiro durante a verifica√ß√£o da vit√≥ria.


// e classList contains serve para veriifcar se h√° a classe do jogador atual?

// Sim, exatamente! O classList.contains(jogadorAtual) verifica se a c√©lula tem a classe correspondente ao jogador atual.

// Por exemplo, se jogadorAtual for "x", ent√£o classList.contains("x") verifica se a c√©lula tem a classe "x". Se tiver, a fun√ß√£o retorna true, caso contr√°rio, retorna false.

// Esse m√©todo √© utilizado para checar se uma c√©lula tem o valor de "x" ou "o", ajudando a determinar se a combina√ß√£o de vit√≥ria √© v√°lida.

// me explique o elementosCelula[index]

// O elementosCelula[index] acessa um elemento espec√≠fico dentro da NodeList elementosCelula, que √© uma cole√ß√£o de todas as c√©lulas do tabuleiro.

// Vamos dividir isso:

// elementosCelula: √© uma NodeList (uma lista de n√≥s) que cont√©m todos os elementos HTML que possuem o atributo data-celula, ou seja, as c√©lulas do tabuleiro do jogo.

// index: √© a posi√ß√£o dentro da lista elementosCelula. Em outras palavras, ele indica qual c√©lula espec√≠fica estamos acessando, baseado na combina√ß√£o de vit√≥ria (por exemplo, [0, 1, 2], [3, 4, 5], etc.).

// elementosCelula[index]: acessa a c√©lula correspondente √† posi√ß√£o index na NodeList elementosCelula.

// Por exemplo, se index = 0, elementosCelula[0] se refere √† primeira c√©lula do tabuleiro (c√©lula de √≠ndice 0).

// Exemplo:
// Se voc√™ tiver uma combina√ß√£o de vit√≥ria como [0, 1, 2], e no momento o jogador estiver tentando verificar se essas 3 c√©lulas est√£o com o mesmo valor (como "x" ou "o"), o c√≥digo vai fazer o seguinte:


// elementosCelula[0].classList.contains(jogadorAtual); // Verifica a c√©lula 0
// elementosCelula[1].classList.contains(jogadorAtual); // Verifica a c√©lula 1
// elementosCelula[2].classList.contains(jogadorAtual); // Verifica a c√©lula 2
// Esse c√≥digo verifica se as c√©lulas nas posi√ß√µes 0, 1 e 2 t√™m a classe correspondente ao jogadorAtual.


// √© para acessar os index das combina√ß√µes de vit√≥ria? exemplo: se for 0,1,2, elementos[index] acessara os index disso? √© o meio de acesso as celulas que est√£o na lista de combina√ß√µes de vit√≥ria

// Exatamente! üòÑ

// O elementosCelula[index] serve para acessar as c√©lulas espec√≠ficas do tabuleiro de acordo com os √≠ndices das combina√ß√µes de vit√≥ria.

// Como funciona:
// A lista combinacaoVitoria cont√©m v√°rias combina√ß√µes de √≠ndices que representam as posi√ß√µes das c√©lulas no tabuleiro (exemplo: [0, 1, 2], [0, 3, 6]).
// O index dentro do every √© o √≠ndice de cada c√©lula dentro de uma combina√ß√£o de vit√≥ria espec√≠fica (por exemplo, 0, 1, 2).
// elementosCelula[index] acessa as c√©lulas nas posi√ß√µes indicadas pela combina√ß√£o de vit√≥ria (como as c√©lulas 0, 1 e 2, por exemplo).
// Exemplo pr√°tico:
// Se a combina√ß√£o de vit√≥ria for [0, 1, 2], o c√≥digo vai:

// Verificar a c√©lula na posi√ß√£o 0 (elementosCelula[0])
// Verificar a c√©lula na posi√ß√£o 1 (elementosCelula[1])
// Verificar a c√©lula na posi√ß√£o 2 (elementosCelula[2])
// Ou seja, ele usa os √≠ndices das combina√ß√µes de vit√≥ria para acessar as c√©lulas do tabuleiro correspondentes a essas posi√ß√µes.

// Esse c√≥digo define a fun√ß√£o encerrarJogo, que √© chamada quando o jogo termina. Ela recebe um par√¢metro empate para determinar se o jogo terminou em empate ou se algu√©m venceu.

// Se empate for verdadeiro: A mensagem "Deu velha" √© exibida, indicando que o jogo terminou em empate.
// Se empate for falso: A fun√ß√£o verifica quem venceu. Se for o jogador O (quando vezCirculo √© verdadeiro), a mensagem "O VENCEU" √© exibida. Caso contr√°rio, se for o jogador X, a mensagem "X VENCEU" √© exibida.
// Depois de definir a mensagem, a classe mostrarMsg √© adicionada ao elemento cxVitoria para mostrar a mensagem de vit√≥ria na tela.
// Resumindo, a fun√ß√£o exibe a mensagem de vit√≥ria ou empate quando o jogo termina.

// o else se empate for falso ele sabe quem venceu baseado na vez do circulo?

// Sim, exatamente! Quando o empate √© falso, a fun√ß√£o usa o valor da vari√°vel vezCirculo para determinar quem venceu:

// Se vezCirculo for verdadeiro (true), significa que foi o jogador O que venceu, ent√£o a mensagem "O VENCEU" ser√° exibida.
// Se vezCirculo for falso (false), significa que foi o jogador X que venceu, e a mensagem "X VENCEU" ser√° exibida.
// Portanto, o vezCirculo serve como indicador de qual jogador foi o vencedor.

// ent√£o essa mensagem √© adicionada ao html e depois a caixa da mensagem recebe um display para que seja exibida?

// Sim, exatamente! O fluxo √© o seguinte:

// Mensagem de vit√≥ria: A fun√ß√£o encerrarJogo altera o conte√∫do da vari√°vel msgVitoria com a mensagem apropriada (quem venceu ou se foi empate). Ela faz isso com innerText ou innerHTML.

// Se houver um vencedor, a mensagem ser√° algo como "O VENCEU" ou "X VENCEU", dependendo de quem ganhou.
// Se for empate, a mensagem ser√° "Deu velha".
// Exibi√ß√£o da caixa de mensagem: Ap√≥s definir a mensagem, a fun√ß√£o adiciona a classe mostrarMsg ao elemento cxVitoria. Isso provavelmente ativa um estilo CSS que faz a caixa de mensagem aparecer na tela (como por exemplo, alterar o display para block ou algo semelhante).

// Ent√£o, o que acontece √©:

// A mensagem √© atualizada no HTML.
// A caixa de mensagem se torna vis√≠vel, mostrando a mensagem de vit√≥ria ou empate.
// trocaJogador sera executado apenas se n√£o houver um vencedor pois o codigo ira parar ali?

// Exatamente! O trocarJogador() ser√° executado somente se n√£o houver um vencedor.

// Aqui est√° o fluxo:

// O clique √© registrado e o "X" ou "O" √© adicionado √† c√©lula.
// A fun√ß√£o verificarVitoria(classeAd) √© chamada para checar se a jogada resultou em vit√≥ria.
// Se houver vit√≥ria (vitoria for true), a fun√ß√£o encerrarJogo(false) √© chamada e o jogo √© finalizado, n√£o acontecendo mais nada ap√≥s isso (o c√≥digo n√£o chega a executar trocarJogador()).
// Se n√£o houver vit√≥ria (vitoria for false), a fun√ß√£o trocarJogador() √© chamada para alternar entre os jogadores.
// Ent√£o, o trocarJogador() s√≥ √© chamado se n√£o houver um vencedor.
// const trocarJogador = () =>{
//     vezCirculo = !vezCirculo;
//     tabuleiro.classList.remove("o","x");
    
//     if(vezCirculo){
//         tabuleiro.classList.add("o");
//     }else{
//         tabuleiro.classList.add("x");
//     }

// }
// A fun√ß√£o trocarJogador serve para alternar entre os jogadores "X" e "O" e atualizar a classe do tabuleiro. Aqui est√° o que ela faz:

// Alterna o valor de vezCirculo:

// vezCirculo = !vezCirculo: Se vezCirculo for false (jogador "X"), se torna true (jogador "O"). Se for true (jogador "O"), se torna false (jogador "X").
// Remove as classes "o" e "x" do tabuleiro:

// tabuleiro.classList.remove("o", "x"): Antes de adicionar a classe do pr√≥ximo jogador, removemos qualquer classe existente do tabuleiro (que pode ser "o" ou "x").
// Adiciona a classe do jogador atual ao tabuleiro:

// Se vezCirculo for true, adiciona a classe "o" (indicando que o jogador "O" joga agora).
// Se vezCirculo for false, adiciona a classe "x" (indicando que o jogador "X" joga agora).
// Essa fun√ß√£o mant√©m o controle de qual jogador est√° em turno e altera a apar√™ncia do tabuleiro conforme o jogador ativo.


// Ao come√ßar o jogo (quando voc√™ chama comecaJogo() pela primeira vez), a fun√ß√£o configura os addEventListener nas c√©lulas com { once: true }. Isso permite que as c√©lulas sejam clicadas apenas uma vez.

// Quando o jogo √© reiniciado com a fun√ß√£o reiniciar(), as c√©lulas j√° n√£o t√™m os addEventListener porque o { once: true } removeu os eventos ap√≥s a primeira jogada.

// Ao reiniciar o jogo, voc√™ chama novamente comecaJogo(). Isso reconfigura os event listeners nas c√©lulas, permitindo que o jogo continue, e as c√©lulas voltem a ser clicadas novamente.












// O classList √© uma propriedade dos elementos DOM que fornece uma maneira de manipular as classes CSS de um elemento. Ele permite adicionar, remover e verificar as classes de um elemento de forma f√°cil e eficiente.

// Aqui est√£o algumas das principais opera√ß√µes que voc√™ pode realizar com classList:

// add(className): Adiciona uma ou mais classes ao elemento.

// Exemplo: element.classList.add("x") adiciona a classe x ao elemento.
// remove(className): Remove uma ou mais classes do elemento.

// Exemplo: element.classList.remove("x") remove a classe x.
// toggle(className): Alterna entre adicionar e remover uma classe. Se a classe j√° estiver no elemento, ela √© removida; se n√£o estiver, ela √© adicionada.

// Exemplo: element.classList.toggle("active") alterna a classe active.
// contains(className): Verifica se o elemento tem uma classe espec√≠fica.

// Exemplo: element.classList.contains("x") retorna true se o elemento tiver a classe x.
// replace(oldClass, newClass): Substitui uma classe por outra.

// Exemplo: element.classList.replace("old", "new") substitui a classe old pela classe new.
// O classList √© muito √∫til porque permite manipular as classes de forma mais eficiente do que usando className diretamente, especialmente ao lidar com v√°rias classes ou verifica√ß√µes.
// De maneira resumida:
// - **`add(className)`**: Adiciona uma classe.
// - **`remove(className)`**: Remove uma classe.
// - **`toggle(className)`**: Alterna entre adicionar e remover a classe.
// - **`contains(className)`**: Verifica se a classe existe no elemento.
// - **`replace(oldClass, newClass)`**: Substitui uma classe por outra.

// Some:
// O m√©todo some() testa se ao menos um dos elementos no array passa no teste implementado pela fun√ß√£o atribu√≠da e retorna um valor true ou false.
// some() executa a fun√ß√£o callback uma vez para cada elemento presente no array at√© achar um onde o callback retorne um valor true. Se em qualquer dos elementos o valor for encontrado, some() imediatamente retorna true. Caso contrario, some() retorna false. callback √© invocado somente para √≠ndices do array que contenham valor definido; n√£o √© invocado para √≠ndices que foram deletados ou os quais nunca tiveram valor definido.